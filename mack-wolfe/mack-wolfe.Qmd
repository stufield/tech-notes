---
title: "The Mack-Wolfe Test"
author: "Stu Field"
date: today
date-format: "D MMMM YYYY"
format:
  gfm:
    preview-mode: raw
# output:
# html_document:
#   code_folding: show
#   number_sections: yes
#   toc: yes
#   toc_float:
#     collapsed: no
#editor_options: 
# markdown: 
#   wrap: 72
---


```{r}
#| label: setup
#| include: FALSE
library(patchwork)
knitr::opts_chunk$set(
 collapse = TRUE,
 comment = "#>"
)
cap1 <- paste(
  "Fig. 1: Four different Mack-Wolfe scenarios.",
  "1) equal response among groups,",
  "2) increasing response among groups",
  "3) initial equal response then increasing",
  "4) initial equal response then increasing",
  "but with fewer samples at beginning where response in equal"
)
```


# Mack-Wolfe Non-Parametric Peak Tests

Given an expected group ordering
(i.e. `Group A < Group B < Group C < Group D`),
the Mack-Wolfe test counts for _each_ value in Group A, the number of values
in Group B that are greater in magnitude (+0.5 for ties), and repeats this
calculation for all _each_ $n\choose2$, $n\ge2$, pairwise combinations
(i.e. `A--B, A--C, A--D, B--C, B--D, C--D`).
In the extreme, if there are 9 samples in Group A and 15 samples in
Group B, and _all_ the samples in
Group B are greater than the highest value in Group A, this results in
$9 \times 15 = 135$ for that pairwise combination.
The process is repeated and summed for the other 5 combinations.
See below for 4 different possible JT-test scenarios (Mack-Wolfe with peak at end).


```{r} 
#| label: mack-wolfe
#| fig.cap: cap1
#| fig.height: 8
#| fig.width: 9
mack_fake_data <- function() {
  withr::local_seed(100)
  data.frame(
    equal_degree        = factor(rep(LETTERS[1:4], each = 10)),
    unequal_degree      = factor(rep(LETTERS[1:4], c(5, 9, 16, 10))),
    equal_response      = c(rnorm(10, 10, 2), rnorm(10,10,2), 
                            rnorm(10, 10, 2), rnorm(10, 10, 2)),
    increasing_response = c(rnorm(10, 5, 2), rnorm(10, 10, 2),
                            rnorm(10,15,2), rnorm(10, 20 ,2)),
    dogleg_response     = c(rnorm(10, 5, 2), rnorm(10, 5, 2),
                            rnorm(10, 15, 2), rnorm(10, 20, 2)),
    dogleg_response2    = c(rnorm(5, 5, 2), rnorm(9, 2, 2),
                            rnorm(16, 15, 2), rnorm(10,20,2))
  )
}

test_mack_data <- mack_fake_data()
response_vec   <- c("equal_response", "increasing_response", "dogleg_response")
names(response_vec) <- response_vec

mack_tests <- lapply(response_vec, function(.x) {
  SomaClassify::mackwolfe(
    test_mack_data[, .x], test_mack_data$equal_degree, peak = "jt"
  )
})

mack_tests$dogleg_response2 <- SomaClassify::mackwolfe(
  test_mack_data$dogleg_response2, test_mack_data$unequal_degree, peak = "jt"
)

p <- lapply(response_vec, function(.p) {
   SomaPlotr::boxplotBeeswarm(
     split(test_mack_data[, .p], test_mack_data$equal_degree),
           notch = FALSE, main = .p)
})

p[[4L]] <- SomaPlotr::boxplotBeeswarm(
  split(test_mack_data$dogleg_response2, test_mack_data$unequal_degree),
  notch = FALSE, main = "dogleg_response unequal groups")

p[[1L]] + p[[2L]] + p[[3L]] + p[[4L]]
```

---------


For scenarios where there is an expected peak, the test statistic ($A_p$)
is calculated as essentially the sum of two JT-tests, summing over the
_upward_ side and _downward_ side JT-tests.

For example, if **peak = Group C**,
i.e. `Group A < Group B < Group C > Group D`,
two tests are calculated and summed:

$$
(Group\ A < Group\ B < Group\ C) + (Group\ C > Group\ D)
$$.

The significance is inferred typically using a large-sample approximation
to the Gaussian distribution (A*), i.e. conversion to a Z$\_{score}$,
from which an associated p-value can be calculated.

------

Created by [Rmarkdown](https://github.com/rstudio/rmarkdown)
(v`r utils::packageVersion("rmarkdown")`) and `r R.version$version.string`.

